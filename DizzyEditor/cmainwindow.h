#ifndef C_MAIN_WINDOW_H
#define C_MAIN_WINDOW_H

//****************************************************************************************************
//Класс главного окна программы
//****************************************************************************************************

//****************************************************************************************************
//подключаемые библиотеки
//****************************************************************************************************
#include <QMainWindow>
#include "cimagestorage.h"
#include <vector>

//****************************************************************************************************
//пространства имён
//****************************************************************************************************

namespace Ui
{
 class CMainWindow;
}

//****************************************************************************************************
//макроопределения
//****************************************************************************************************

//****************************************************************************************************
//константы
//****************************************************************************************************

//****************************************************************************************************
//предварительные объявления
//****************************************************************************************************

//****************************************************************************************************
//Класс главного окна программы
//****************************************************************************************************
class CMainWindow:public QMainWindow
{
 Q_OBJECT
 public:
  //-перечисления---------------------------------------------------------------------------------------
  //-структуры------------------------------------------------------------------------------------------
  //-константы------------------------------------------------------------------------------------------
 private:
  //-переменные-----------------------------------------------------------------------------------------
  Ui::CMainWindow *ui;
  QPixmap qPixmap_Screen;//поле редактирования

  QAction *qAction_ModeSetPart;//действие при выборе режима "установка элементов"
  QAction *qAction_ModeSelectPart;//действие при выборе режима "выбор элементов"
  QAction *qAction_ModeMoveMap;//действие при выборе режима "перемещение карты"

  int32_t SelectedTileIndexX;//позиция выбранного тайла по X
  int32_t SelectedTileIndexY;//позиция выбранного тайла по Y

  std::string CurrentFileName;//текущее имя файла карты

  int32_t TilesScale;//масштабный коэффициент набора тайлов
  double MapScale;//масштабный коэффициент карты
 public:
  //-конструктор----------------------------------------------------------------------------------------
  explicit CMainWindow(QWidget *parent=0);
  //-деструктор-----------------------------------------------------------------------------------------
  ~CMainWindow();
 public:
  //-открытые функции-----------------------------------------------------------------------------------  
 private:
  //-закрытые функции-----------------------------------------------------------------------------------
  void UpdateTilesImage(void);//обновить картинку списка тайлов
  void mousePressEvent(QMouseEvent *qMouseEvent_Ptr);//обработчик нажатия на кнопку мышки
  void mouseReleaseEvent(QMouseEvent *qMouseEvent_Ptr);//обработчик отпускания кнопки мышки  
  void keyPressEvent(QKeyEvent *pe);//обработчик нажатия клавиши
  void keyReleaseEvent(QKeyEvent *event);//обработчик отпускания клавиши
  void wheelEvent(QWheelEvent *event);//событие вращения колёсика мышки
 private slots:
  void on_cCheckBox_Matherial_Barrier_clicked(void);//слот нажатия на кнопку проницаемости материала
  void on_cCheckBox_Matherial_FirstPlane_clicked();//слот нажатия на кнопку переднего плана материала
  void on_cCheckBox_Matherial_BeforeBackground_clicked();//слот нажатия на кнопку задания, что материал является предметом
  void on_cPushButton_SetPartName_clicked();//слот нажатия на кнопку задания имени материала
  void on_cAction_SaveMap_triggered(void);//слот выбора пункта меню "сохранить карту"
  void on_cAction_LoadMap_triggered(void);//слот выбора пункта меню "загрузить карту"
  void on_cAction_ExportMap_triggered();//слот выбора пункта меню "экспортировать карту"
  void on_cAction_ClearMap_triggered();//слот выбора пункта меню "очистить карту"
  void On_ToolBar_Main_SetPart(void);//слот выбора в панеле инструментов режима установки блоков
  void On_ToolBar_Main_SelectPart(void);//слот выбора в панеле инструментов режима выбора блоков
  void On_ToolBar_Main_MoveMap(void);//слот выбора в панеле инструментов режима перемещения по карте
  void on_cAction_SaveMapAs_triggered();//слот выбора пункта меню "сохранить карту как"
  void on_cPushButton_ImageX1_released();//слот выбора режима масштабирования поля тайлов 1:1
  void on_cPushButton_ImageX2_released();//слот выбора режима масштабирования поля тайлов 2:1
  void on_cPushButton_ImageX3_released();//слот выбора режима масштабирования поля тайлов 3:1
  void on_cPushButton_ImageX4_released();//слот выбора режима масштабирования поля тайлов 4:1
  void on_cPushButton_MapX05_released();//слот выбора режима масштабирования поля карты x0.5
  void on_cPushButton_MapX1_released();//слот выбора режима масштабирования поля карты x1
  void on_cPushButton_MapX2_released();//слот выбора режима масштабирования поля карты x2
  void on_cPushButton_MapX3_released();//слот выбора режима масштабирования поля карты x3
  void on_cPushButton_MapX4_released();//слот выбора режима масштабирования поля карты x4
  void on_cPushButton_MapX5_released();//слот выбора режима масштабирования поля карты x5
};

#endif
